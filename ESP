--[[ 
    Self-Contained FakeDrawing Library Replacement for the Drawing API 
    (with __newindex support so that property assignments auto-update)
--]]

local Drawing = {}
Drawing.__index = Drawing

-- Create a metatable that intercepts property assignments.
local Drawing_mt = {
    __index = Drawing,
    __newindex = function(self, key, value)
        rawset(self, key, value)
        if key == "From" or key == "To" then
            if self.Type == "Line" then
                self:UpdateLine()
            end
        elseif key == "Visible" and self.GuiObject then
            self.GuiObject.Visible = value
        elseif key == "Color" and self.GuiObject then
            if self.Type == "Text" then
                self.GuiObject.TextColor3 = value
            else
                self.GuiObject.BackgroundColor3 = value
            end
        elseif key == "Transparency" and self.GuiObject then
            self.GuiObject.BackgroundTransparency = value
        elseif key == "Thickness" and self.Type == "Line" then
            self:UpdateLine()
        elseif key == "ZIndex" and self.GuiObject then
            self.GuiObject.ZIndex = value
        end
    end
}

-- Helper: Get the parent for GUI elements using CoreGui
local function getDrawingParent()
    local coreGui = game:GetService("CoreGui")
    if coreGui then
        print("[FakeDrawing] Using CoreGui as GUI parent.")
        return coreGui
    end
    warn("[FakeDrawing] CoreGui not accessible! Trying PlayerGui...")
    local player = game:GetService("Players").LocalPlayer
    return player and player:FindFirstChildOfClass("PlayerGui")
end

-- Get or create the main ScreenGui container
local function getDrawingGui()
    local parent = getDrawingParent()
    if not parent then
        warn("[FakeDrawing] Could not obtain a parent for the Drawing GUI!")
        return nil
    end
    local drawingGui = parent:FindFirstChild("FakeDrawingLib")
    if not drawingGui then
        drawingGui = Instance.new("ScreenGui")
        drawingGui.Name = "FakeDrawingLib"
        drawingGui.ResetOnSpawn = false
        drawingGui.IgnoreGuiInset = true -- Ensure it covers the whole screen
        drawingGui.Parent = parent
        print("[FakeDrawing] Created new ScreenGui: FakeDrawingLib")
    end
    return drawingGui
end

-- Creates a new drawing object. Supports "Line" and "Text".
function Drawing.new(type)
    print("[DEBUG] Drawing.new called with type:", type)
    
    local self = {
        Type = type,
        Visible = false,
        Color = Color3.new(1, 1, 1),
        Transparency = 0,
        Thickness = 2,
        ZIndex = 1,
        From = Vector2.new(0, 0),
        To = Vector2.new(0, 0),
    }
    
    setmetatable(self, Drawing_mt)

    local drawingGui = getDrawingGui()
    if not drawingGui then
        warn("[DEBUG] Failed to get drawingGui in Drawing.new")
        return nil
    end

    -- Print debug info for parent GUI
    print("[DEBUG] GUI Parent Found:", drawingGui)

    if type == "Line" then
        self.GuiObject = Instance.new("Frame")
        self.GuiObject.Name = "FakeLine"
        self.GuiObject.BorderSizePixel = 0
        self.GuiObject.AnchorPoint = Vector2.new(0, 0.5)
        self.GuiObject.BackgroundColor3 = self.Color
        self.GuiObject.Visible = self.Visible
        self.GuiObject.Size = UDim2.new(0, 0, 0, self.Thickness)
        
        print("[DEBUG] Created FakeLine Object:", self.GuiObject)
    elseif type == "Text" then
        self.GuiObject = Instance.new("TextLabel")
        self.GuiObject.Name = "FakeText"
        self.GuiObject.BackgroundTransparency = 1
        self.GuiObject.TextColor3 = self.Color
        self.GuiObject.Visible = self.Visible
        self.GuiObject.TextSize = 14

        print("[DEBUG] Created FakeText Object:", self.GuiObject)
    else
        warn("[DEBUG] Unsupported Drawing type:", type)
        return nil
    end

    self.GuiObject.ZIndex = self.ZIndex
    self.GuiObject.Parent = drawingGui

    -- Final confirmation that object is created and parented
    print("[DEBUG] Object Parent:", self.GuiObject.Parent)
    
    return self
end

-- Removes the drawing object.
function Drawing:Remove()
    print("[FakeDrawing] Drawing:Remove called.")
    if self.GuiObject then
        self.GuiObject:Destroy()
        self.GuiObject = nil
        print("[FakeDrawing] GuiObject destroyed.")
    else
        print("[FakeDrawing] No GuiObject to destroy.")
    end
end

-- Updates a line drawing based on current From and To values.
function Drawing:UpdateLine()
    print("[FakeDrawing] Drawing:UpdateLine called.")
    if not self.GuiObject then
        print("[FakeDrawing] UpdateLine: GuiObject is missing.")
        return
    end
    if not self.From or not self.To then
        print("[FakeDrawing] UpdateLine: From or To is missing.")
        return
    end

    local from = self.From
    local to = self.To
    local direction = to - from
    local length = direction.Magnitude
    local angle = math.deg(math.atan2(direction.Y, direction.X))

    -- Ensure the line stays within screen bounds
    local viewportSize = game:GetService("Workspace").CurrentCamera.ViewportSize
    if from.X < 0 or from.Y < 0 or from.X > viewportSize.X or from.Y > viewportSize.Y then
        self.GuiObject.Visible = false
        return
    end
    if to.X < 0 or to.Y < 0 or to.X > viewportSize.X or to.Y > viewportSize.Y then
        self.GuiObject.Visible = false
        return
    end

    self.GuiObject.Size = UDim2.new(0, length, 0, self.Thickness)
    self.GuiObject.Position = UDim2.new(0, from.X, 0, from.Y)
    self.GuiObject.Rotation = angle
    self.GuiObject.BackgroundColor3 = self.Color
    self.GuiObject.BackgroundTransparency = self.Transparency
    self.GuiObject.Visible = self.Visible

    print(string.format("[FakeDrawing] Line updated: From=(%.2f, %.2f), To=(%.2f, %.2f), Length=%.2f, Angle=%.2f",
        from.X, from.Y, to.X, to.Y, length, angle))
end

--[[ 
    Test Code for the FakeDrawing Library 
    This will create a visible red line from (100, 100) to (300, 200).
--]]
print("[FakeDrawing] Starting test code...")

local line = Drawing.new("Line")
if line then
    print("[FakeDrawing] Line object created successfully.")
    line.From = Vector2.new(500, 500) -- Adjusted for visibility
    line.To = Vector2.new(600, 500)
    line.Color = Color3.new(1, 0, 0)   -- Set line color to red
    line.Thickness = 4                -- Make the line thicker
    line.ZIndex = 10                  -- Bring line to front
    line.Transparency = 0             -- Ensure no transparency
    line.Visible = true               -- Make the line visible
else
    warn("[FakeDrawing] Failed to create a Line object!")
end

return Drawing
